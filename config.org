
* Contents                                                         :TOC_3_gh:
- [[#emacs-config][Emacs Config]]
  - [[#custom][Custom]]
  - [[#package-bootstrapping][Package Bootstrapping]]
  - [[#basic-ui][Basic UI]]
  - [[#path-things--osx][Path Things / OSX]]
  - [[#themes][Themes]]
  - [[#magit][Magit]]
  - [[#buffer--window-navigation][Buffer / Window Navigation]]
  - [[#search--ivy--counsel][Search / Ivy / Counsel]]
  - [[#v-term][v-term]]
  - [[#autocomplete][Autocomplete]]
  - [[#linters][Linters]]
  - [[#generic-editing][Generic Editing]]
  - [[#org-mode][Org-mode]]
  - [[#markdown][Markdown]]
  - [[#python][Python]]
  - [[#r][R]]
  - [[#sql][SQL]]
  - [[#other-languages][Other Languages]]
  - [[#llms][LLMs]]
    - [[#gptel][GPTel]]
    - [[#copilot][CoPilot]]
  - [[#misc--everything-else][Misc / Everything else]]

* Emacs Config

Install emacs with =brew install --cask emacs=. 

Note - next time you upgrade emacs, you should delete all of `/straight/` and any compiled files.  

#+begin_src bash
cp ~/.emacs.d ~/.emacs.d.bak
rm -rf ~/.emacs.d/straight
find ~/.emacs.d -name "*.elc" -delete
#+end_src

You'll also want to run =all-the-icons-install-fonts=.

Reload the config with ~load-init~.

#+begin_src emacs-lisp
(defun load-init ()
  "Reload the init file.  I am learning how to write elisp."
  (interactive) ;; Do I need this for everything??
  (message "Reloading init.el...")
  (load-file "~/.emacs.d/init.el"))
#+end_src

And let's try to open this file on startup.

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda () (find-file "~/.emacs.d/config.org")))
#+end_src

** Custom 
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")

;; Custom tries to put auto-generated code in your init.el
;; This will prevent that.
;; https://emacs.stackexchange.com/a/29746
(setq custom-file "~/.emacs.d/custom.el")
(load-file custom-file)
#+end_src
** Package Bootstrapping

Package bootstrapping is in init.el.  We need to load org-mode before calling =(org-babel-load-file "~/.emacs.d/config.org")=.  

straight and org installs are both in init.el.  

#+begin_src emacs-lisp
;; Bootstrap straight.el
;; https://github.com/raxod502/straight.el#getting-started

;; M-x straight-check-<package/all>
;; M-x straight-rebuild-<package/all>
;;
;; Set straight-check-for-modifications to nil before the bootstrap if
;; you don't want straight to do automatic updating.

#+end_src


** Basic UI

#+begin_src emacs-lisp
(setq mac-command-modifier 'meta ;; I want this to do nothing.
      mac-option-modifier 'meta)

;;; Code:
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(electric-indent-mode -1)
(set-fringe-mode 10)  ;; size of margins in pixels


;; Always make tabs into spaces
(setq-default indent-tabs-mode nil)

(set-frame-font "Menlo 24")

(use-package command-log-mode
)

;; Without this, doom-modeline will display chinese characters, which
;; I cannot read.
;; You also need to run M-x all-the-icons-install-fonts 
;; and nerd-icons-install-fonts
(use-package all-the-icons
  :if (display-graphic-p))

   (use-package all-the-icons-dired
     :hook (dired-mode . all-the-icons-dired-mode))

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 15)
  ;;  why does this not set at startup?
)


   (use-package beacon
     :config (beacon-mode 1))

;;  Appearance
(defun transparency (value)
  "Set the transparency of the frame window.
VALUE from 0 = transparent, 100 = opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src

#+begin_src emacs-lisp


#+end_src

#+RESULTS:
| doom-1337 | doom-Iosvkem | doom-acario-dark | doom-acario-light | doom-ayu-dark | doom-ayu-light | doom-ayu-mirage | doom-badger | doom-bluloco-dark | doom-bluloco-light | doom-challenger-deep | doom-city-lights | doom-dark+ | doom-dracula | doom-earl-grey | doom-ephemeral | doom-fairy-floss | doom-feather-dark | doom-feather-light | doom-flatwhite | doom-gruvbox-light | doom-gruvbox | doom-henna | doom-homage-black | doom-homage-white | doom-horizon | doom-ir-black | doom-lantern | doom-laserwave | doom-manegarm | doom-material-dark | doom-material | doom-meltbus | doom-miramare | doom-molokai | doom-monokai-classic | doom-monokai-machine | doom-monokai-octagon | doom-monokai-pro | doom-monokai-ristretto | doom-monokai-spectrum | doom-moonlight | doom-nord-aurora | doom-nord-light | doom-nord | doom-nova | doom-oceanic-next | doom-oksolar-dark | doom-oksolar-light | doom-old-hope | doom-one-light | doom-one | doom-opera-light | doom-opera | doom-outrun-electric | doom-palenight | doom-peacock | doom-pine | doom-plain-dark | doom-plain | doom-rouge | doom-shades-of-purple | doom-snazzy | doom-solarized-dark-high-contrast | doom-solarized-dark | doom-solarized-light | doom-sourcerer | doom-spacegrey | doom-tokyo-night | doom-tomorrow-day | doom-tomorrow-night | doom-vibrant | doom-wilmersdorf | doom-winter-is-coming-dark-blue | doom-winter-is-coming-light | doom-xcode | doom-zenburn |

** Path Things / OSX
#+begin_src emacs-lisp
;;  Shell thing
(setq shell-file-name "bash")
;; Is this necessary if I have exec-path-from-shell??
(setenv "SHELL" shell-file-name)
(setenv "ESHELL" shell-file-name)

(use-package exec-path-from-shell
  :if (memq window-system '(mac ns))
  :init
  (exec-path-from-shell-initialize))
;; Got this stuff from Mickey Peterson
;; https://www.masteringemacs.org/article/running-shells-in-emacs-overview
;; (setq explicit-shell-file-name "/bin/bash")
#+end_src

Most =$PATH= things are correct, but sdk-man sets itself up with a script that runs in each shell rather than adding to your =$PATH= itself.  So we need to manually add the sdk directory in order for us to get the right java.
#+begin_src emacs-lisp
(setq exec-path (append '("/Users/patrick.foley/.sdkman/candidates/java/current/bin/") exec-path))
#+end_src

Web stuff.  I removed osx-browse, which I used to use to set up safari.

#+begin_src emacs-lisp
(use-package browse-at-remote
  :bind ("C-c b r" . browse-at-remote)
)

(use-package google-this)
#+end_src

OSX copy/paste

#+begin_src emacs-lisp
;; Copy-Paste
;; This let's me copy and paste w/ OSX
(setq select-enable-clipboard t)

(defun copy-to-clipboard ()
  "Copy like OSX."
  (interactive)
  (if (display-graphic-p)
      (progn
	(message "Yanked region to x-clipboard!")
	(call-interactively 'clipboard-kill-ring-save)
	)
    (if (region-active-p)
	(progn
	  (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
	  (message "Yanked region to clipboard!")
	  (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
  )

(defun paste-from-clipboard ()
  "Paste like  OSX."
  (interactive)
  (if (display-graphic-p)
      (progn
	(clipboard-yank)
	(message "graphics active")
	)
    (insert (shell-command-to-string "xsel -o -b"))
    )
  )
#+end_src

** Themes

#+begin_src emacs-lisp
  ;; Themes
  (setq my-themes-list '(doom-solarized-light doom-solarized-dark doom-monokai-classic))

  (use-package doom-themes
    :config 
    (dolist (theme my-themes-list)
      (load-theme theme t t)))

  (setq custom-safe-themes t)

(use-package solaire-mode
  :config
  (solaire-global-mode +1)
)

  (use-package cycle-themes
    :straight (
      cycle-themes :type git :host github :repo "toroidal-code/cycle-themes.el"
                   :fork (:host github :repo "patrickeganfoley/cycle-themes.el")
                   )
    :config (setq cycle-themes-theme-list
                  my-themes-list
                )
    :bind ("C-c c" . cycle-themes)
    )
#+end_src

** Magit

Commands to remember:
  - =C-c d r= is diff-range, use this to check diff of a file (--limit to file) against a branch. 

#+begin_src emacs-lisp
(use-package emacsql)

        (use-package magit
          :bind (("C-x g" . magit-status))
          :config (progn
                    ;; The following two are critical for making magit 2.1.0 work more
                    ;; like 1.x for me: WITHOUT these, creating a new topic branch
                    ;; defaults its remote to master -- and pushing the topic branch
                    ;; pushes to master (?!?). WITH these, you're prompted on the
                    ;; first push, and need to supply origin/<topic-branch-name>, but
                    ;; thereafter it's set and all is well.
                    (setq magit-branch-arguments '()) ;do NOT want --track
                    (setq magit-push-arguments '("--set-upstream")))) ;aka -u

  (use-package forge
    :after magit)

#+end_src

I might want to add back =(use-package forge :after magit)=, but currently it's causing trouble with https://github.com/magit/forge/issues/535#issuecomment-1387734805 

** Buffer / Window Navigation
#+begin_src emacs-lisp
(global-set-key (kbd "C-x o") 'next-multiframe-window)

;; http://stackoverflow.com/a/17984479
(defun prev-window ()
  (interactive)
  (other-window -1))

;;(define-key global-map (kbd "C-x p") 'prev-window)
(define-key global-map (kbd "C-x p") 'previous-multiframe-window)

(defun rotate-windows ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
		    #'split-window-vertically
		  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
	(other-window 1)
	(switch-to-buffer (other-buffer))))))

;; From http://emacswiki.org/emacs/TransposeWindows
;; They also include this:
;; (define-key ctl-x-4-map (kbd "t") 'transpose-windows)
(defun transpose-windows (arg)
  "Transpose the buffers shown in two windows.
Don't know what ARG does."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
	    (next-win (window-buffer (funcall selector))))
	(set-window-buffer (selected-window) next-win)
	(set-window-buffer (funcall selector) this-win)
	(select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

;; Zooms in on one buffer.  Let's you zoom back out.
;; Think of it as like narrowing but for buffers
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Narrowing.html
;; code from https://gist.github.com/mads-hartmann/3402786#gistcomment-693878
(defun toggle-maximize-buffer () "Maximize buffer."
       (interactive)
       (if (= 1 (length (window-list)))
	   (jump-to-register '_)
	 (progn
	   (window-configuration-to-register '_)
	   (delete-other-windows))))
;;  Good tips on keybinding conventions
;; https://emacs.stackexchange.com/questions/42164/convention-about-using-c-x-or-c-c-as-prefix-keys
(global-set-key (kbd "C-c z") 'toggle-maximize-buffer)

#+end_src
** Search / Ivy / Counsel

ivy - generic completion mechanism
swiper - uses ivy, alternative to isearch
counsel - enhanced versions of common commands
smex/amx - older version of replace search

#+begin_src emacs-lisp
(use-package ivy
  :straight t
  :config
  (ivy-mode 1)
 ;; you might also want counsel and swiper
)

(use-package counsel
  :straight t
  :after ivy
  :config (counsel-mode)
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
)
;; Ivy/counsel by default prepends M-x searches with ^,
;; which prevents fuzzy matching.
(setq ivy-initial-inputs-alist nil)


(use-package ivy-rich
  :straight t
  :init
  (ivy-rich-mode 1)
)

(use-package helpful
  :straight t
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key)

)
#+end_src
** v-term

#+begin_src emacs-lisp
   (use-package vterm
     :ensure t
  :config
  ;; Enable cursor line in vterm buffer when in "line mode"
  (defvar-local vterm-line-mode nil
    "Track whether we're in line mode (similar to ansi-term's line mode)")

  ;; Function to toggle between "character mode" and "line mode"
  (defun vterm-toggle-line-char-mode ()
    "Toggle between line mode and char mode in vterm (similar to ansi-term)"
    (interactive)
    (if vterm-line-mode
        (vterm-char-mode)
      (vterm-line-mode)))

  ;; Implement line mode
  (defun vterm-line-mode ()
    "Enable line mode in vterm (similar to ansi-term's line mode)"
    (interactive)
    (setq vterm-line-mode t)
    (hl-line-mode 1)
    (vterm-copy-mode)
    (message "vterm line mode enabled"))

  ;; Implement char mode
  (defun vterm-char-mode ()
    "Enable char mode in vterm (similar to ansi-term's char mode)"
    (interactive)
    (setq vterm-line-mode nil)
    (hl-line-mode -1)
    (vterm-copy-mode -1)
    (message "vterm char mode enabled"))

  ;; Bind the keys to match ansi-term
  :bind (:map vterm-mode-map
         ("C-c C-j" . vterm-line-mode)
         ("C-c C-k" . vterm-char-mode)
         :map vterm-copy-mode-map
         ("C-c C-j" . vterm-line-mode)
         ("C-c C-k" . vterm-char-mode)))
#+end_src

#+RESULTS:
: vterm-char-mode

** Autocomplete
The major autocompletion tools are company mode and auto-complete. company-mode is more actively maintained and has a better API for
plugins.  You will need to install plugins for different languages just like you install different backends for syntax checking with
flycheck.

Python has two major auto complete backends that work with company: jedi and rope.  rope is more about refactoring.

#+begin_src emacs-lisp
(use-package company
  :straight t
  :diminish company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-global-modes '(not eshell-mode shell-mode org-mode))
  ;; :bind
  ;; ("<tab>" . company-complete)
  ;; ("<tab>" . company-complete-common)
  ;;:config
  )
#+end_src

I disable company in org-mode and shell, otherwise it messes with all the asteriskses. 
** Linters

Flycheck is syntax checking specifically for emacs - it does not check syntax itself, but calls external programs.

LSP-mode uses flycheck as its UI, it does not replace it.

flymake is the built-in version of syntax checking.

#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :init (global-flycheck-mode)
  ;; Use C-c ! v to check out flycheck settings
  ;; Use C-c ! n to check the next error!
  )

;; I might want to point this to ~/.asdf/shims/python3
   (setq flycheck-python-pycompile-executable "python3")
#+end_src


** Generic Editing
Tools for block commenting, comment boxes, etc...

I'll try to get a put-in-spaces/quotes/etc.. thing here.

#+begin_src emacs-lisp
;; Original idea from
;; http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
(defun comment-dwim-line (&optional arg)
  "Replacement for the `comment-dwim' command.
If no region is selected and current line is not blank and we are
  not at the end of the line, then comment current line.
  Replaces default behaviour of `comment-dwim', when it inserts
  comment at the end of the line.
  ARG is passed to `comment-normalize-vars'"
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p)) (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position) (line-end-position))
    (comment-dwim arg)))
(global-set-key "\M-;" 'comment-dwim-line)

(defun bjm-comment-box (b e)
  "Draw a comment box.
Pulled from http://www.star.bris.ac.uk/bjm/emacs-tips.html.
B is beginning of the box.
E is the end."

  (interactive "r")

  (let ((e (copy-marker e t)))
    (goto-char b)
    (end-of-line)
    (insert-char ?  (- fill-column (current-column)))
    (comment-box b e 1)
    (goto-char e)
    (set-marker e nil))
)
(global-set-key (kbd "C-c b b") 'bjm-comment-box)

;; https://www.emacswiki.org/emacs/IncrementNumber
 (defun increment-number-at-point ()
      (interactive)
      (skip-chars-backward "0-9")
      (or (looking-at "[0-9]+")
          (error "No number at point"))
      (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

(defun xah-replace-invisible-char ()
  "Query replace some invisible Unicode chars.
The chars to be searched are:
 ZERO WIDTH NO-BREAK SPACE (65279, #xfeff)
 ZERO WIDTH SPACE (codepoint 8203, #x200b)
 RIGHT-TO-LEFT MARK (8207, #x200f)
 RIGHT-TO-LEFT OVERRIDE (8238, #x202e)
 LEFT-TO-RIGHT MARK ‎(8206, #x200e)
 OBJECT REPLACEMENT CHARACTER (65532, #xfffc)

Search begins at cursor position. (respects `narrow-to-region')

URL `http://xahlee.info/emacs/emacs/elisp_unicode_replace_invisible_chars.html'
Version 2018-09-07"
  (interactive)
  (query-replace-regexp "\ufeff\\|\u200b\\|\u200f\\|\u202e\\|\u200e\\|\ufffc" ""))


#+end_src

** Org-mode

#+begin_src emacs-lisp
  (require 'ox-md nil t)

  (setq org-hide-emphasis-markers t)

  (add-hook 'org-mode-hook 'org-indent-mode)
  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Don't add new lines
  (setf org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))

  ;; subscripts/superscripts 
  ;; https://orgmode.org/manual/Subscripts-and-Superscripts.html#Subscripts-and-Superscripts
  (setq org-pretty-entities t)
  (setq org-pretty-entities-include-sub-superscripts t)

  ;; kanban
  (use-package org-kanban
    :straight t
    :config 
    (setq
     org-kanban/layout '("..." . 24)
     org-kanban/next-keys "tf"
     org-kanban/prev-keys "tb"
    )
  )

(use-package toc-org
  :straight t
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable)
)

(use-package org-modern
  :straight t
  :hook
  (org-mode . org-modern-mode)
  (org-agenda-mode . org-modern-agenda)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤") (45 . "–") (42 . "•"))))
#+end_src

#+RESULTS:
| org-modern-agenda |

You can put =# -*- org-confirm-babel-evaluate: nil -*-=
at the top of a document to avoid typing =yes= to 20+ src blocks.


You can also use
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src


** Markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("readme\\.md\\'" . gfm-mode)
	 ("\\.md\\'"       . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (progn
	  (setq markdown-command "multimarkdown")
	  ;; I don't think the variable-font-buffer part works.
	  (add-hook 'markdown-mode-hook 'variable-font-buffer)
	  (add-hook 'gfm-mode-hook 'variable-font-buffer)
	  )
  )


(use-package vmd-mode
  ;;  You also need to install vmd
  ;;  You set up nodejs 14.17.5 with asdf
  :straight t
  )

#+end_src
** Python


#+begin_src emacs-lisp

  (use-package lsp-mode
    :straight t
    :commands lsp
    :config
    (setq lsp-disabled-clients nil)
    (setq lsp-enabled-clients '(pyright ruff-lsp))
    (setq lsp-diagnostics-provider :flycheck)
    :hook
    (python-mode . lsp))

   (use-package lsp-pyright
     :ensure t
     :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))

  (with-eval-after-load 'lsp-mode
    (add-to-list 'lsp-language-id-configuration
                 '(python-mode . "python"))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection "ruff-lsp")
      :activation-fn (lsp-activate-on "python")
      :priority -1
      :server-id 'ruff-lsp)))

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-sideline-show-diagnostics t)
    (setq lsp-ui-doc-position 'at-point)
  )


  (use-package pyvenv
    :straight t
    :init
    (setenv "WORKON_HOME" "~/venvs/")
    :config
    (pyvenv-mode t)

    ;; you want M-x pyvenv-activate RET dir_to_the_environment/env
    ;; and then `C-c C-p`

    ;; Set correct Python interpreter
    (setq pyvenv-post-activate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
    (setq pyvenv-post-deactivate-hooks
          (list (lambda ()
                  (setq python-shell-interpreter "python3")))))


  (defun my_set_venv (venv)
    "Tell flycheck to use pylint, flake8, etc.. from a VENV."
    (interactive "sChoose a venv from ~/venvs/")
    ;; (setq-local pylintexec (concat "/Users/patrickfoley/venvs/" venv "/bin/pylint"))
    (message "Setting pylint & flake8 for flycheck to use %s " venv)
    (setq flycheck-python-pylint-executable
          (concat "/Users/patrickfoley/venvs/" venv "/bin/pylint")
          )
    (setq flycheck-python-flake8-executable
          (concat "/Users/patrickfoley/venvs/" venv "/bin/flake83")
          )
    (setq flycheck-python-flake8-executable
          (concat "/Users/patrickfoley/venvs/" venv "/bin/flake82")
          )
    (message "Setting lsp-pyright-python-executable-cmd  %s " venv)
    (setq lsp-pyright-python-executable-cmd
          (concat "/Users/patrickfoley/venvs/" venv "/bin/python")
          )
  )


  (use-package blacken
    :straight t
    :config
    ;;(add-hook 'python-mode-hook 'blacken-mode)
    )


  (use-package py-yapf
    :straight t
    )

  ;;  EIN - Emacs IPython Notebook
  ;;  Do not use the old repo maintained by tkf,
  ;;  check out the new one at https://github.com/millejoh/emacs-ipython-notebook
  ;;  For some reason, ein:jupyter-server-start does not work
  ;;  It all works fine if I open the notebook server in an eshell.
  ;; See https://github.com/millejoh/emacs-ipython-notebook/issues/176#issuecomment-299512815
  ;; for issues with being unable to log in.
  ;;  Ein Notes:
  ;;    run ein:notebooklist-login, use the password
  ;;    
  (use-package ein
    :straight t
    :commands (ein:notebooklist-open)
    :config
    (defvar ein:jupyter-default-server-command)
    (defvar ein:jupyter-server-args)
    (setq ein:jupyter-default-server-command "~/venvs/sf39/bin/jupyter"
  	ein:jupyter-server-args (list "--no-browser"))
    (setq ein:output-area-inlined-images t)
  )
#+end_src

#+RESULTS:
: t

Can I make the plots a bit smaller?

#+begin_src emacs-lisp
(defun my-ein-setup ()
  (setq ein:output-area-inlined-images t)
  (setq ein:slice-image t)
  (setq ein:slice-image-data '(800 . nil)))  ; Width in pixels

(add-hook 'ein:notebook-mode-hook 'my-ein-setup)
#+end_src

#+RESULTS:
| my-ein-setup |

** R 

#+begin_src emacs-lisp
;; R Rlang R ESS
(use-package ess
  :straight t
  :mode (
	 ("\\.r\\'" . r-mode)
	 ("\\.R\\'" . r-mode)
	 )
  :init (require 'ess-r-mode)
  )

(use-package polymode
  :straight t
  :commands (poly-markdown+r-mode)
  :mode (("\\.rmd\\'" . poly-markdown+r-mode)
	 ("\\.Rmd\\'" . poly-markdown+r-mode))
  )

(use-package poly-markdown
  :straight t
  :mode (
	 ("\\.md\\'" . poly-markdown-mode)
	 )
  )

(use-package poly-R
  :straight t
  )

(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)))

#+end_src
** SQL

This is all based off https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client

First some generic sql setup.

#+begin_src emacs-lisp
    ;; I put this here I think to avoid linter errors (assignment to free variable)
    ;; But note - you need this _BEFORE_ secrets.el
    (defvar sql-connection-alist)
    (setq sql-connection-alist '() )

    ;; This contains some sql db locations and passwords
    ;; It is not on github.
    (load-file "~/.emacs.d/secrets.el")

    (require 'sql)
    (use-package sql
      :straight t
      :init (progn
              (add-hook 'sql-interactive-mode-hook 'orgtbl-mode)
              ;; This is great!  You can sort sql results
              ;; after they show up if you forgot to in the query!
              ;; C-c ^ will sort!
              )
      :hook
      (sql-mode . enable-sql-upcase)
      (sql-interactive-mode . enable-sql-upcase)

      :config
      (define-abbrev-table 'sql-mode-abbrev-table
        (mapcar #'(lambda (v) (list v (upcase v) nil 1))
                '("absolute" "action" "add" "after" "all" "allocate" "alter" "and" "any" "are" "array" "as" "asc" "asensitive" "assertion" "asymmetric" "at" "atomic" "authorization" "avg" "before" "begin" "between" "bigint" "binary" "bit" "bitlength" "blob" "boolean" "both" "breadth" "by" "call" "called" "cascade" "cascaded" "case" "cast" "catalog" "char" "char_length" "character" "character_length" "check" "clob" "close" "coalesce" "collate" "collation" "column" "commit" "condition" "connect" "connection" "constraint" "constraints" "constructor" "contains" "continue" "convert" "corresponding" "count" "create" "cross" "cube" "current" "current_date" "current_default_transform_group" "current_path" "current_role" "current_time" "current_timestamp" "current_transform_group_for_type" "current_user" "cursor" "cycle" "data" "date" "day" "deallocate" "dec" "decimal" "declare" "default" "deferrable" "deferred" "delete" "depth" "deref" "desc" "describe" "descriptor" "deterministic" "diagnostics" "disconnect" "distinct" "do" "domain" "double" "drop" "dynamic" "each" "element" "else" "elseif" "end" "equals" "escape" "except" "exception" "exec" "execute" "exists" "exit" "external" "extract" "false" "fetch" "filter" "first" "float" "for" "foreign" "found" "free" "from" "full" "function" "general" "get" "global" "go" "goto" "grant" "group" "grouping" "handler" "having" "hold" "hour" "identity" "if" "immediate" "in" "indicator" "initially" "inner" "inout" "input" "insensitive" "insert" "int" "integer" "intersect" "interval" "into" "is" "isolation" "iterate" "join" "key" "language" "large" "last" "lateral" "leading" "leave" "left" "level" "like" "limit" "local" "localtime" "localtimestamp" "locator" "loop" "lower" "map" "match" "map" "member" "merge" "method" "min" "minute" "modifies" "module" "month" "multiset" "names" "national" "natural" "nchar" "nclob" "new" "next" "no" "none" "not" "null" "nullif" "numeric" "object" "octet_length" "of" "old" "on" "only" "open" "option" "or" "order" "ordinality" "out" "outer" "output" "over" "overlaps" "pad" "parameter" "partial" "partition" "path" "position" "precision" "prepare" "preserve" "primary" "prior" "privileges" "procedure" "public" "range" "read" "reads" "real" "recursive" "ref" "references" "referencing" "relative" "release" "repeat" "resignal" "restrict" "result" "return" "returns" "revoke" "right" "role" "rollback" "rollup" "routine" "row" "rows" "savepoint" "schema" "scope" "scroll" "search" "second" "section" "select" "sensitive" "session" "session_user" "set" "sets" "signal" "similar" "size" "smallint" "some" "space" "specific" "specifictype" "sql" "sqlcode" "sqlerror" "sqlexception" "sqlstate" "sqlwarning" "start" "state" "static" "submultiset" "substring" "sum" "symmetric" "system" "system_user" "table" "tablesample" "temporary" "then" "time" "timestamp" "timezone_hour" "timezone_minute" "to" "trailing" "transaction" "translate" "translation" "treat" "trigger" "trim" "true" "under" "undo" "union" "unique" "unknown" "unnest" "until" "update" "upper" "usage" "user" "using" "value" "values" "varchar" "varying" "view" "when" "whenever" "where" "while" "window" "with" "within" "without" "work" "write" "year" "zone" "greatest" "least")))

      (defun enable-sql-upcase ()
        (abbrev-mode 1)
        ;; Make underscore a word character so that abbrev stops expanding
        ;; send_count to send_COUNT
        (modify-syntax-entry ?_ "w" sql-mode-syntax-table))

      )

    (add-hook 'sql-interactive-mode-hook
              (lambda ()
                (toggle-truncate-lines t)))
#+end_src 

#+begin_src emacs-lisp
    (defvar sql-postgres-program)
    (setq sql-postgres-program "/usr/local/bin/psql")

    (defvar sql-send-terminator)
    (setq sql-send-terminator t)

    (setq sql-send-terminator ";")



    ;; Get this from https://github.com/stitchfix/booga/blob/master/gsn/bin/sane-presto
    (defvar sql-presto-program)
    (setq sql-presto-program "sane-presto3")
    ;; not used -- prevent emacs from asking for these
    (defvar sql-presto-login-params)
    (setq sql-presto-login-params '((user :default "patrick")
                                    (database :default "")))

    (defun sql-comint-presto (product options x)
      "Interactive connection to presto.
          PRODUCT is maybe presto, maybe psql.  OPTIONS I don't use.
          We don't know what X is."
      (let ((sql-login-delay 0.9))
        (message "%S" product)
        (message "%S" options)
        (message "%S" x)
        (sql-comint product options)))

    (defvar sql-product-alist)
    (add-to-list 'sql-product-alist
                 '(presto
                   :name "Presto"
                   :free-software t
                   :font-lock sql-mode-postgres-font-lock-keywords
                   :sqli-program sql-presto-program
                   :sqli-login sql-presto-login-params
                   :sqli-comint-func sql-comint-presto
                   :prompt-regexp "^\\w*[#>] "
                   :prompt-length 8
                   :prompt-cont-regexp "^\\w*[-(]*[#>] "
                   :input-filter sql-remove-tabs-filter
                   :terminator ("\\(^\\s-*\\\\g$\\|;\\)" . "\\g")))

    (defun sql-presto ()
      "Connect to presto."
      (interactive)
      (let ((sql-product 'presto))
        (sql-connect 'presto)
        ))

    ;; Now let's add ~/data/basketball.db to our sql-product-alist
    (add-to-list 'sql-product-alist
                 '(basketball
                   :name "Basketball"
                   :free-software t
                   :font-lock sql-mode-postgres-font-lock-keywords
                   :sqli-program sql-sqlite-program
                   :sqli-login sql-sqlite-login-params
                   :sqli-comint-func sql-comint-sqlite
                   :prompt-regexp "^\\w*[#>] "
                   :prompt-length 8
                   :prompt-cont-regexp "^\\w*[-(]*[#>] "
                   :input-filter sql-remove-tabs-filter
                   :terminator ("\\(^\\s-*\\\\g$\\|;\\)" . "\\g")))

          (defun sql-basketball ()
                  "Connect to basketball."
                  (interactive)
                  (let ((sql-product 'basketball))
                  (sql-connect 'basketball)
                  ))

          (add-to-list 'sql-connection-alist
                   '(basketball
                           (sql-product 'basketball)
                           (sql-database "~/sports/data/basketball.db")
                           (sql-server "localhost")
                           (sql-user "patrick")
                           (sql-password "")
                           (sql-read-only t)
                           ))

    ;; To connect to a local db sqlite db:
    ;; M-x sql-sqlite
    ;; <name_of_db.db>

    (defun set-sql-buffer ()
      "Point to *SQL*."
      (interactive)
      (setq sql-buffer "*SQL*"))

    ;;(global-set-key (kbd "C-c q") 'set-sql-bufer)
#+end_src


** Other Languages

#+begin_src emacs-lisp
;; Scala
(use-package scala-mode
  :straight t
  :interpreter
  ("scala" . scala-mode))

;; Golang
(use-package go-mode
  :straight t
  :init
  (progn
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (bind-key [remap find-tag] #'godef-jump))
  :config
  (add-hook 'go-mode-hook 'electric-pair-mode))
#+end_src
** LLMs

Auths are from =secrets.el=. 

*** GPTel

#+begin_src emacs-lisp
        (use-package gptel
          :straight t

          :bind (("C-c g" . gptel)
                 ("C-c G" . gptel-send))
          :config
          (setq gptel-default-mode 'org-mode)
      ;; https://github.com/karthink/gptel/issues/351
      ;; for the 
      ;; Claude error: (HTTP/2 400) messages.2: all ;;messages must have non-empty content except ;; for the optional final assistant message
      ;;issue 
      (defun my/gptel-font-lock-update (&rest _)
          (when (and font-lock-mode (derived-mode-p 'org-mode))
            (font-lock-update)))
      (add-hook 'gptel-post-response-functions #'my/gptel-font-lock-update)

          ;; local
          (load-file "~/.emacs.d/gptel-config.el")
          )

#+end_src

#+RESULTS:
| my/gptel-font-lock-update |

I am trying to be able to save/load contexts as files.

#+begin_src emacs-lisp
(org-babel-load-file "~/.emacs.d/gptel-context-persistence.org")
#+end_src

#+RESULTS:
: Loaded ~/.emacs.d/gptel-context-persistence.el


#+begin_src emacs-lisp
;; Add a keybinding for the context manager
;;(global-set-key (kbd "C-c g p t") 'gptel-context-manager)
#+end_src



*** CoPilot

Not sure if this will work.  

#+begin_src emacs-lisp
      (use-package copilot
        :straight (
          copilot :type git :host github :repo "zerolfx/copilot.el" :files ("dist" "*.el")
                   )
        :ensure t
        :init (setq copilot-node-executable "/Users/patrick.foley/.asdf/installs/nodejs/20.3.1/bin/node")
        :config (

      )
)
#+end_src


Now try that and try =M-x copilot-login=.  

Wow that worked!  And it's pretty slick!  You need to activate =copilot-mode=, but it works!

So now let me see if I can get tab completion working.  This hasn't worked in the =config= or =init= sections yet.

#+begin_src emacs-lisp
(defun my/copilot-tab ()
  (interactive)
  (or (copilot-accept-completion)
      (indent-for-tab-command)))

(with-eval-after-load 'copilot
  (define-key copilot-mode-map (kbd "<tab>") #'my/copilot-tab))
#+end_src

** Misc / Everything else
#+begin_src emacs-lisp
;; TeX
(use-package latex-math-preview
  :straight t)

(use-package which-key
  :straight t
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1.5)
  ;; I can't scroll through the display?
)

(use-package multiple-cursors
  :straight t
  :config ()
  )


;; Fonts
;; I want orgmode and markdowns to use variable width fonts.
;; Use variable width font faces in current buffer
;;  This line just declares a variable that apparently
;;  is defined in some other package.
;;  See https://emacs.stackexchange.com/questions/21245/dealing-with-warning-assignment-to-free-variable-when-certain-libraries-can-b for why it' necessary.
(defvar buffer-face-mode-face)
(defun variable-font-buffer ()
  "Set font to a variable width (proportional) fonts in current buffer.  Taken from https://emacs.stackexchange.com/a/3044."
  (interactive)
  (setq buffer-face-mode-face '(
				:family "Times New Roman"
				:height 200
				))
  (buffer-face-mode)
  )


;;  Does this have to come after rmode?
(use-package restclient
  :straight t
  :mode (("\\.restclient\\'" . restclient-mode)))


;;  Kind of annoying there is a flymake yaml
;;  but no flycheck-yaml
(use-package yaml-mode
  :straight t
  :mode "\\.yaml\\'"
  :mode "\\.portal\\'"
  :mode "\\.portal_monitoring\\'")


(use-package projectile
  ;; NOTE - you use this mostly for C-c p s g and C-c p r
  ;; but using M-s . is also really nice!!
  ;; https://stackoverflow.com/a/1775184
  ;;
  ;; http://batsov.com/projectile/
  ;; projectile highly recommends the fix-ido package.
  ;; Maybe I should use it.
  ;; Useful Commands:
  ;;    C-c p s g  Run grep on the files in the project.
  ;;    C-c p b  Display a list of all project buffers currently open (for current project).
  ;;    C-c p p  Display a list of known projects you can switch to.
  ;;    C-c p r  Runs interactive query-replace on all files in the projects.
  ;;    C-c p s s  Runs ag on the project. Requires the presence of ag.el.
  ;;    (This is recommended instead of projectile isearch)
  ;;    C-c p C-h (shows all projectile bindings)
  :straight t
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :custom 
  (projectile-completion-system 'ivy)
  :config (progn
	    (setq projectile-enable-caching t)
	    (setq projectile-switch-project-action 'projectile-dired))
)

(use-package counsel-projectile
  :straight t
  :config (counsel-projectile-mode)
)




;;  dired-mode stuff
;;  sets default to be human readable sizes
;; http://pragmaticemacs.com/emacs/dired-human-readable-sizes-and-sort-by-size/
(setq dired-listing-switches "-alh")

;;  let's me sort by size
(defun xah-dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2015-07-30
  It would be nice if dired mode showed column names at the top and let you hit them to sort.  Or if it was an orgmode table to begin with."
  (interactive)
  (let ($sort-by $arg)
    (setq $sort-by (ido-completing-read "Sort by:" '( "date" "size" "name" "dir")))
    (cond
     ((equal $sort-by "name") (setq $arg "-alh"))
     ((equal $sort-by "date") (setq $arg "-alt"))
     ((equal $sort-by "size") (setq $arg "-alhS"))
     (t(error "Logic error 09535")))
    (dired-sort-other $arg)))

(eval-after-load "dired"
  '(progn (define-key dired-mode-map (kbd "s") 'xah-dired-sort)))

(defun beautify-json ()
  "Format region as json."
  (interactive)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
	(e (if mark-active (max (point) (mark)) (point-max))))
    (shell-command-on-region b e
			     "python -m json.tool" (current-buffer) t)))

;; Want to be able to quickly look at json/events from presto
;; pulled from https://stackoverflow.com/questions/435847/emacs-mode-to-edit-json
(use-package json-mode
  :straight t
  :mode (("\\.json\\'" . json-mode))
  :config (setq-default js-indent-level 4))

(global-set-key (kbd "C-c C-f") 'beautify-json)


#+end_src


#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src
